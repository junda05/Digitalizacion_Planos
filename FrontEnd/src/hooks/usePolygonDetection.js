import { useState, useCallback, useRef } from 'react';
import SubplotAnalyzerRobust from '../services/utils/SubplotAnalyzerRobust';

/**
 * Hook personalizado para detecci√≥n mejorada de pol√≠gonos
 * Elimina falsos positivos y mejora la precisi√≥n de detecci√≥n
 */
function usePolygonDetection() {
  const [isDetecting, setIsDetecting] = useState(false);
  const [lastDetectionResult, setLastDetectionResult] = useState(null);
  const analyzerRef = useRef(null);

  // Inicializar analizador robusto con configuraci√≥n optimizada
  const getAnalyzer = useCallback(() => {
    if (!analyzerRef.current) {
      analyzerRef.current = new SubplotAnalyzerRobust();
      // Configuraci√≥n optimizada para m√°xima precisi√≥n
      analyzerRef.current.updateConfig({
        tolerance: 15,              // OPTIMIZADO: m√°s preciso que versi√≥n anterior
        minArea: 1000,              // √Årea m√≠nima para sublotes significativos
        maxArea: 500000,            // √Årea m√°xima razonable
        minVertices: 3,             // M√≠nimo: tri√°ngulo
        maxVertices: 12,            // OPTIMIZADO: menos v√©rtices para mejor detecci√≥n
        qualityThreshold: 65,       // NUEVO: umbral de calidad geom√©trica
        containmentThreshold: 0.90, // NUEVO: 90% contenci√≥n dentro de bordes
        enableDebugLog: true        // NUEVO: logging detallado para debug
      });
    }
    return analyzerRef.current;
  }, []);

  /**
   * Valida que un pol√≠gono est√© realmente cerrado manualmente
   */
  const validateClosedPolygon = useCallback((vertices, borderVectors) => {
    if (vertices.length < 3) return false;

    const firstPoint = vertices[0];
    const lastPoint = vertices[vertices.length - 1];
    
    // Verificar que el primer y √∫ltimo punto est√©n muy cerca (pol√≠gono cerrado)
    const distance = Math.sqrt(
      Math.pow(firstPoint[0] - lastPoint[0], 2) + 
      Math.pow(firstPoint[1] - lastPoint[1], 2)
    );
    
    // Debe estar cerrado dentro de 10px
    if (distance > 10) return false;

    // Verificar que todos los v√©rtices del pol√≠gono correspondan a puntos reales de los vectores
    let validVertexCount = 0;
    
    vertices.forEach(polyVertex => {
      let foundInVector = false;
      
      borderVectors.forEach(vector => {
        vector.forEach(vectorPoint => {
          const dist = Math.sqrt(
            Math.pow(polyVertex[0] - vectorPoint[0], 2) + 
            Math.pow(polyVertex[1] - vectorPoint[1], 2)
          );
          
          if (dist < 15) { // Tolerancia de 15px
            foundInVector = true;
          }
        });
      });
      
      if (foundInVector) validVertexCount++;
    });

    // Al menos 80% de los v√©rtices deben corresponder a puntos reales
    const validRatio = validVertexCount / vertices.length;
    return validRatio >= 0.8;
  }, []);

  /**
   * Filtra pol√≠gonos que son solo combinaciones autom√°ticas
   */
  const filterFalsePositives = useCallback((detectedPolygons, borderVectors) => {
    console.log('üîç Filtrando falsos positivos...');
    
    const validPolygons = detectedPolygons.filter(polygon => {
      const vertices = polygon.vertices || polygon;
      
      // Validaci√≥n 1: Pol√≠gono cerrado manualmente
      const isValidClosure = validateClosedPolygon(vertices, borderVectors);
      if (!isValidClosure) {
        console.log('‚ùå Pol√≠gono rechazado: no est√° cerrado manualmente');
        return false;
      }

      // Validaci√≥n 2: √Årea razonable
      const area = polygon.area || calculatePolygonArea(vertices);
      if (area < 1000 || area > 1000000) {
        console.log(`‚ùå Pol√≠gono rechazado: √°rea fuera de rango (${area.toFixed(0)}px¬≤)`);
        return false;
      }

      // Validaci√≥n 3: Forma geom√©trica v√°lida
      const aspectRatio = calculateAspectRatio(vertices);
      if (aspectRatio > 20) { // Evitar pol√≠gonos extremadamente alargados
        console.log(`‚ùå Pol√≠gono rechazado: forma extrema (ratio: ${aspectRatio.toFixed(1)})`);
        return false;
      }

      // Validaci√≥n 4: No debe ser solo un rect√°ngulo de bordes externos
      const isExternalBorder = isPolygonExternalBorder(vertices, borderVectors);
      if (isExternalBorder) {
        console.log('‚ùå Pol√≠gono rechazado: es solo el borde externo');
        return false;
      }

      console.log(`‚úÖ Pol√≠gono v√°lido: ${area.toFixed(0)}px¬≤, ${vertices.length} v√©rtices`);
      return true;
    });

    console.log(`üéØ Filtrado completado: ${validPolygons.length}/${detectedPolygons.length} pol√≠gonos v√°lidos`);
    return validPolygons;
  }, [validateClosedPolygon]);

  /**
   * Calcula el √°rea de un pol√≠gono usando el algoritmo Shoelace
   */
  const calculatePolygonArea = useCallback((vertices) => {
    if (vertices.length < 3) return 0;
    
    let area = 0;
    const n = vertices.length;
    
    for (let i = 0; i < n; i++) {
      const j = (i + 1) % n;
      area += vertices[i][0] * vertices[j][1];
      area -= vertices[j][0] * vertices[i][1];
    }
    
    return Math.abs(area) / 2;
  }, []);

  /**
   * Calcula la relaci√≥n de aspecto de un pol√≠gono
   */
  const calculateAspectRatio = useCallback((vertices) => {
    if (vertices.length < 3) return 0;

    let minX = vertices[0][0], maxX = vertices[0][0];
    let minY = vertices[0][1], maxY = vertices[0][1];

    vertices.forEach(([x, y]) => {
      minX = Math.min(minX, x);
      maxX = Math.max(maxX, x);
      minY = Math.min(minY, y);
      maxY = Math.max(maxY, y);
    });

    const width = maxX - minX;
    const height = maxY - minY;

    return Math.max(width, height) / Math.min(width, height);
  }, []);

  /**
   * Verifica si el pol√≠gono es solo el borde externo
   */
  const isPolygonExternalBorder = useCallback((polygonVertices, borderVectors) => {
    if (borderVectors.length !== 1) return false;

    const borderVector = borderVectors[0];
    if (borderVector.length !== polygonVertices.length) return false;

    // Verificar si todos los puntos coinciden (con tolerancia)
    let matchCount = 0;
    polygonVertices.forEach(polyPoint => {
      const hasMatch = borderVector.some(borderPoint => {
        const dist = Math.sqrt(
          Math.pow(polyPoint[0] - borderPoint[0], 2) + 
          Math.pow(polyPoint[1] - borderPoint[1], 2)
        );
        return dist < 20;
      });
      if (hasMatch) matchCount++;
    });

    return matchCount >= polygonVertices.length * 0.9; // 90% de coincidencia
  }, []);

  /**
   * Detecta sublotes usando algoritmos robustos
   */
  const detectSubplots = useCallback(async (borderVectors) => {
    if (!borderVectors || borderVectors.length === 0) {
      console.warn('No hay vectores de borde para analizar');
      return { sublots: [], analysis: { reason: 'No hay vectores' } };
    }

    setIsDetecting(true);
    
    try {
      console.log('üîç Iniciando detecci√≥n ROBUSTA de sublotes...');
      
      const analyzer = getAnalyzer();
      
      // El nuevo analizador robusto maneja toda la validaci√≥n internamente
      const result = analyzer.analyzeSubplots(borderVectors);
      
      setLastDetectionResult(result);
      
      console.log('üéØ Detecci√≥n robusta completada:', {
        sublots: result.sublots.length,
        success: result.analysis.success,
        processingTime: result.analysis.processingTime?.toFixed(2) + 'ms',
        algorithms: result.analysis.algorithmsUsed
      });
      
      // Log m√©tricas de calidad si est√°n disponibles
      if (result.analysis.qualityMetrics) {
        console.log('üìä M√©tricas de calidad:', result.analysis.qualityMetrics);
      }
      
      return result;
      
    } catch (error) {
      console.error('‚ùå Error en detecci√≥n robusta:', error);
      return { 
        sublots: [], 
        analysis: { 
          success: false,
          error: error.message,
          reason: 'Error en el proceso de detecci√≥n robusta' 
        } 
      };
    } finally {
      setIsDetecting(false);
    }
  }, [getAnalyzer]);

  /**
   * Valida conexiones entre l√≠neas para formar pol√≠gonos
   */
  const validateLineConnections = useCallback((lines) => {
    console.log('üîó Validando conexiones entre l√≠neas...');
    
    const connectionMap = new Map();
    const tolerance = 20;

    // Encontrar todas las conexiones v√°lidas
    lines.forEach((line, lineIndex) => {
      const startPoint = line[0];
      const endPoint = line[line.length - 1];
      
      [startPoint, endPoint].forEach((point, pointIndex) => {
        const key = `${Math.round(point[0])},${Math.round(point[1])}`;
        
        if (!connectionMap.has(key)) {
          connectionMap.set(key, []);
        }
        
        connectionMap.get(key).push({
          lineIndex,
          pointIndex,
          point,
          isExtreme: pointIndex === 0 || pointIndex === line.length - 1
        });
      });
    });

    // Buscar conexiones cercanas
    const validConnections = [];
    
    connectionMap.forEach((connections, key) => {
      if (connections.length >= 2) {
        // Punto conecta m√∫ltiples l√≠neas
        validConnections.push({
          position: connections[0].point,
          connectedLines: connections.map(c => c.lineIndex),
          connectionType: 'multi-line'
        });
      }
    });

    console.log(`üîó Conexiones v√°lidas encontradas: ${validConnections.length}`);
    return validConnections;
  }, []);

  return {
    // Estado
    isDetecting,
    lastDetectionResult,
    
    // Funciones principales
    detectSubplots,
    validateClosedPolygon,
    filterFalsePositives,
    calculatePolygonArea,
    validateLineConnections,
    
    // Funciones auxiliares
    calculateAspectRatio,
    isPolygonExternalBorder
  };
}

export default usePolygonDetection;
